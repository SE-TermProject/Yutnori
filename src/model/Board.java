package model;

import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Board {
    private int numSides;
    private final Map<Point, int[][]> coordinateToIndexMap = new HashMap<>();

    public Board(int numSides) {
        this.numSides = numSides;
        initializeCoordinateMap();
    }

    public int[][] getIndicesAt(Point point) {
        return coordinateToIndexMap.get(point);
    }

    public void initializeCoordinateMap() {
        int[][] data;
        if (numSides == 4) {
            data = new int[][] {
                    // 중심점
                    {350, 350, 1, 18}, {350, 350, 2, 13},

                    // 대각선
                    {256, 256, 2, 11}, {303, 303, 2, 12},
                    {444, 256, 1, 6}, {397, 303, 1, 7},
                    {303, 397, 1, 9}, {256, 444, 1, 10},
                    {397, 397, 2, 14}, {444, 444, 2, 15},

                    // 외곽 선상 점들 (왼쪽 -> 위 -> 오른쪽 -> 아래 방향)
                    {491, 491, 0, 0}, {491, 491, 2, 16}, {491, 434, 0, 1}, {491, 378, 0, 2}, {491, 321, 0, 3}, {491, 265, 0, 4}, {491, 209, 0, 5},
                    {434, 209, 0, 6}, {378, 209, 0, 7}, {321, 209, 0, 8}, {265, 209, 0, 9}, {209, 209, 0, 10},
                    {209, 265, 0, 11}, {209, 321, 0, 12}, {209, 378, 0, 13}, {209, 434, 0, 14}, {209, 491, 0, 15}, {209, 491, 1, 11},
                    {265, 491, 0, 16}, {321, 491, 0, 17}, {378, 491, 0, 18}, {434, 491, 0, 19}
            };
        } else if (numSides == 5) {
            data = new int[][] {
                    {350, 216, 2, 11}, {350, 283, 2, 12}, {223, 309, 3, 16}, {286, 329, 3, 17},
                    {350, 350, 1, 8}, {350, 350, 2, 13}, {350, 350, 3, 18}, {413, 329, 1, 7}, {311, 403, 1, 9}, {389, 403, 2, 14},
                    {272, 457, 1, 10}, {428, 457, 2, 15}, {350, 150, 0, 10}, {388, 177, 0, 9},
                    {426, 205, 0, 8}, {464, 233, 0, 7}, {502, 261, 0, 6}, {540, 289, 0, 5},
                    {476, 309, 1, 6}, {525, 333, 0, 4}, {510, 377, 0, 3}, {496, 422, 0, 2},
                    {481, 466, 0, 1}, {467, 511, 0, 0}, {467, 511, 2, 16}, {420, 511, 0, 24}, {373, 511, 0, 23},
                    {326, 511, 0, 22}, {279, 511, 0, 21}, {233, 511, 0, 20}, {233, 511, 1, 11}, {218, 466, 0, 19},
                    {203, 422, 0, 18}, {189, 377, 0, 17}, {174, 333, 0, 16}, {160, 289, 0, 15},
                    {198, 261, 0, 14}, {236, 233, 0, 13}, {274, 205, 0, 12}, {312, 177, 0, 11}
            };
        } else if (numSides == 6) {
            data = new int[][] {
                    {283, 234, 3, 16}, {416, 234, 2, 11}, {316, 292, 3, 17}, {383, 292, 2, 12},
                    {216, 350, 4, 21}, {283, 350, 4, 22}, {350, 350, 1, 8}, {350, 350, 2, 13}, {350, 350, 3, 18}, {350, 350, 4, 23},
                    {416, 350, 1, 7}, {483, 350, 1, 6}, {317, 407, 2, 14}, {383, 407, 3, 19}, {284, 465, 2, 15},
                    {416, 465, 3, 20}, {250, 177, 0, 15}, {290, 177, 0, 14}, {330, 177, 0, 13},
                    {370, 177, 0, 12}, {410, 177, 0, 11}, {450, 177, 0, 10}, {470, 211, 0, 9},
                    {490, 246, 0, 8}, {510, 280, 0, 7}, {530, 315, 0, 6}, {550, 350, 0, 5},
                    {530, 384, 0, 4}, {510, 419, 0, 3}, {490, 453, 0, 2}, {470, 488, 0, 1},
                    {450, 523, 0, 0}, {450, 523, 3, 21}, {410, 523, 0, 29}, {370, 523, 0, 28}, {330, 523, 0, 27},
                    {290, 523, 0, 26}, {251, 523, 0, 25}, {230, 488, 0, 24}, {210, 453, 0, 23},
                    {190, 419, 0, 22}, {170, 384, 0, 21}, {150, 350, 0, 20}, {170, 315, 0, 19},
                    {190, 280, 0, 18}, {210, 246, 0, 17}, {230, 211, 0, 16}
            };
        } else {
            data = new int[0][];
        }

        Map<Point, List<int[]>> tempMap = new HashMap<>();

        for (int[] entry : data) {
            Point point = new Point(entry[0], entry[1]);
            tempMap
                .computeIfAbsent(point, k -> new ArrayList<>())
                .add(new int[]{entry[2], entry[3]});
        }

        for (Map.Entry<Point, List<int[]>> e : tempMap.entrySet()) {
            List<int[]> list = e.getValue();
            int[][] array = list.toArray(new int[0][]);
            coordinateToIndexMap.put(e.getKey(), array);
        }
    }

    /* 위치가 비어있는지 확인 */
    public boolean isOccupied() {
        return false;
    }

    /* 이동 가능한 위치 계산 */
    public List<int[]> findPossiblePos() {
        return new ArrayList<int[]>();
    }

    /* 실제 말 이동 처리 */
    public void movePieceTo() {

    }

    /* 상대 말 잡기 처리 */
    public void catchPiece() {

    }
}
